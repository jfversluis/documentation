---
type WorkType = 'feature' | 'enhancement' | 'fix' | 'chore';
export interface Props {    
    type?: WorkType;
    breaking?: boolean;
    platform?: string;
}

const { type, breaking, platform } = Astro.props as Props;

const breakingTag = (breaking?: boolean) => {
    if (breaking === true)
        return '<div class="badge badge-error gap-2">BREAKING</div>';
    return '';
};

const typeTag = (type?: WorkType) => {
    const setType = type || 'enhancement';
    const t = setType.charAt(0).toUpperCase() + setType.slice(1);

    switch (setType) {
        case 'feature':
            return `<div class="badge badge-success gap-2">${t}</div>`;
        case 'enhancement':
            return `<div class="badge badge-info gap-2">${t}</div>`;
        case 'fix':
            return `<div class="badge badge-warning gap-2">${t}</div>`;
        case 'chore':
        default:
            return '';
    };
};

const platTag = (platform?: string) => {
    if (platform !== undefined)
        return `<div class="badge badge-info badge-outline gap-2">${platform.toUpperCase()}</div>`;
    return '';
};

const tag = breakingTag(breaking) + typeTag(type) + platTag(platform);
---
<div set:html={tag}></div> <slot />